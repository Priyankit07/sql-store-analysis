USE karma2;

-- 1. List of all products with their brand and category names.
(
SELECT p.product_name, b.brand_name, c.category_name FROM products p
JOIN brands b ON p.brand_id = b.brand_id
JOIN categories c ON p.category_id = c.category_id
);

-- 2. Find customers from any area (I have searched for prople in California(CA) because it sounds cool)
(
SELECT * FROM customers WHERE state = "CA"
);

-- 3. Get all orders placed by a certain customer ( I have searched for a customer named "Debra Burks" because he was the first guy on the customers list).
(
SELECT CONCAT (c.first_name, ' ', c.last_name) AS name, o.order_id, o.order_date, p.product_name, oi.quantity, oi.list_price FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
WHERE c.first_name = 'Debra' AND c.last_name ='Burks'
);

-- 4. List staff of members and which store they belong to
(
SELECT CONCAT (s.first_name,' ',s.last_name) AS staff_name, s.staff_id, s.store_id, st.store_name FROM staffs s
JOIN stores st ON s.store_id = st.store_id
);

-- 5. Top 5 selling products (By total quantity sold)
(
SELECT p.product_name, SUM(oi.quantity)AS total_quantity FROM order_items oi
JOIN products p ON p.product_id = oi.product_id
GROUP BY p.product_name
ORDER BY total_quantity DESC LIMIT 5
);

-- 6. Total revenue generated by each staff member.
(
SELECT CONCAT(s.first_name, s.last_name) AS staff_name, SUM(oi.quantity * oi.list_price) AS total_sales FROM orders o
JOIN staffs s ON o.staff_id = s.staff_id
JOIN order_items oi ON oi.order_id = o.order_id
GROUP BY s.staff_id, s.first_name, s.last_name
ORDER BY total_sales DESC
);

-- 7. Average order value per customer.
(
SELECT c.customer_id, c.first_name, c.last_name, COUNT(DISTINCT o.order_id) AS total_orders, ROUND(SUM(oi.quantity * oi.list_price)/ COUNT(DISTINCT o.order_id), 2) AS avg_order_value FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY avg_order_value DESC
);

-- 8. Monthly Revenue Breakdown
(
SELECT DATE_FORMAT(o.order_date, '%Y-%M') AS month, ROUND(SUM(oi.quantity * oi.list_price), 2) AS monthly_revenue FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY month
ORDER BY month
);

-- 9. Products with No Sales
(
SELECT p.product_id, p.product_name FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL
);

-- 10. Most loyal customers (those who placed the most orders).
(
SELECT CONCAT (c.first_name, ' ',c.last_name) AS customer_name,c.customer_id, COUNT(o.order_id) AS total_orders FROM customers c
JOIN orders o On c.customer_id = o.customer_id
GROUP BY c.customer_id,c.first_name, c.last_name
ORDER BY total_orders DESC
);

-- 11. Which product category brings in the most revenue?
(
SELECT cat.category_name,cat.category_id, ROUND(SUM(oi.quantity*oi.list_price), 2) AS revenue FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN categories cat ON p.category_id = cat.category_id
GROUP by cat.category_id,cat.category_name
ORDER BY revenue DESC
);
-- 12. Rank staff members by their performance (revenue generated).
(
SELECT s.first_name, s.last_name, s.staff_id, ROUND(SUM(oi.quantity*oi.list_price), 2) AS revenue FROM staffs s
JOIN orders o ON s.staff_id = o.staff_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.staff_id, s.first_name, s.last_name
ORDER BY revenue ASC
);

-- 13. List stores that are underperforming (less than average monthly sales). THIS ONE WAS HARD
(
WITH store_monthly_sales AS(
SELECT st.store_id, st.store_name, DATE_FORMAT(o.order_date, '%y-%m') AS MONTH, ROUND(SUM(oi.quantity*oi.list_price), 2) AS monthly_sales FROM stores st
JOIN staffs s ON st.store_id = s.store_id
JOIN orders o ON s.staff_id=o.staff_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY st.store_id, st.store_name, month
),
avg_sales AS(
SELECT
	ROUND (AVG(monthly_sales),2) AS avg_monthly_sales
    FROM store_monthly_sales
)
SELECT sms.store_id, sms.month, sms.monthly_sales FROM store_monthly_sales sms
JOIN avg_sales a ON sms.monthly_sales < a.avg_monthly_sales
ORDER BY sms.month, sms.store_id LIMIT 5
);

-- 14. For each store, whatâ€™s the most sold product (by revenue)?
(
WITH store_product_revenue AS (
    SELECT 
        st.store_id,
        st.store_name,
        p.product_id,
        p.product_name,
        ROUND(SUM(oi.quantity * oi.list_price), 2) AS revenue
    FROM stores st
    JOIN orders o ON st.store_id = o.store_id
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    GROUP BY st.store_id, st.store_name, p.product_id, p.product_name
),
ranked AS (
    SELECT *,
           RANK() OVER (PARTITION BY store_id ORDER BY revenue DESC) AS rnk
    FROM store_product_revenue
)
SELECT store_id, store_name, product_id, product_name, revenue
FROM ranked
WHERE rnk = 1
ORDER BY store_id
);